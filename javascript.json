{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"prefix": "log",
		"body": "console.log();",
	},
	"Print to warn": {
		"prefix": "warn",
		"body": "console.warn();",
	},
	"Functional Component": {
		"prefix": "fc",
		"body": [
			"import React from 'react';",
			"import { View, Text } from 'react-native';",
			"",
			"export default const $1 = () => { ",
			"\treturn (",
			"\t\t<View>",
			"\t\t\t<Text>$2</Text>",
			"\t\t</View>",
			"\t);",
			"}"
		],
	},
	"Class Component": {
		"prefix": "cc",
		"body": [
			"import React, {Component} from 'react';",
			"import { View, Text } from 'react-native';",
			"",
			"export default class $1 extends Component { ",
			"\trender(){",
			"\t\treturn (",
			"\t\t\t<View>",
			"\t\t\t\t<Text>$2</Text>",
			"\t\t\t</View>",
			"\t\t);",
			"\t}",
			"}",
		],
	},
	"Constructor": {
		"prefix": "constr",
		"body": [
			"\tconstructor(props) {",
			"\t\tsuper(props);",
			"\t\tthis.state = {",
			"\t\t\tcontoh : '',",
			"\t\t};",
			"",
			"\tcomponentWillUnmount() {",
			"\t\tthis.setState = (state, callback) => {",
			"\t\t\treturn;",
			"\t\t};",
			"\t}",
		],
	},
	"Const Arrow": {
		"prefix": "con",
		"body": [
			"const $1 = (props) => { ",
			"\treturn (",
			"\t\t<View>",
			"\t\t\t<Text>$2</Text>",
			"\t\t</View>",
			"\t);",
			"}"
		],
	},
	"Navigasi": {
		"prefix": "nav",
		"body": [
			"this.props.navigation.navigate('$1')",
		],
	},
	"Ask": {
		"prefix": "ask",
		"body": [
			"{$1 ? $2 : null }",
		],
	},
	"View": {
		"prefix": "view",
		"body": "<View>$1</View>",
	},
	"Text": {
		"prefix": "text",
		"body": "<Text>$1</Text>",
	},
	"Image": {
		"prefix": "image",
		"body": "<Image source={ require('$1') } />",
	},
	"Imageuri": {
		"prefix": "imageuri",
		"body": "<Image source={{ uri: $1 }} />",
	},
	"Membuat tombol": {
		"prefix": "touch",
		"body": [
			"<TouchableOpacity",
			"\tonPress={() => {}},",
			"\tstyle={{ justifyContent:'center', alignItems:'center', height:20, width:20 }} >",
			"\t<Text>$1</Text>",
			"</TouchableOpacity>",
		],
	},
	"ambil API": {
		"prefix": "api",
		"body": [
			"//TODO : membuat this.url = '';",
			"//TODO : membuat state listdata:[]",
			"async $1 (param) {",
			"\tawait fetch(this.url + param)",
			"\t\t.then(response => response.json())",
			"\t\t.then(json => {",
			"\t\t\tthis.setState({listData: json.results});",
			"\t\t})",
			"\t\t.catch(error => {",
			"\t\t\talert(error);",
			"\t\t});",
			"}",
		],
	},
	"ambil data": {
		"prefix": "map",
		"body": [
			"//TODO : this.state.listData harus mempunyai nilai dan berupa array",
			"{this.state.listData.map((val, index) => (",
			"\t<View key={index} >",
			"\t\t<Text>{val.title}</Text>",
			"\t</View>",
			"\t))}",
		],
	},
}
